#!/usr/bin/env bash
# ------------------------------------------------------------
# gen_hybrid_pki.sh ‚Äì G√©n√©rateur PKI Hybride Post-Quantique
# Compatible avec wolfSSL 5.8.2 et algorithmes NIST
# 
# Root CA   : P-521 + ML-DSA-87 (CNSA 2.0)
# Sub-CA    : P-384 + ML-DSA-65 
# Leaf certs: P-256 + ML-DSA-44 / P-384 + ML-DSA-65 / P-521 + ML-DSA-87
# 
# Utilise les extensions X.509 2019 pour les certificats hybrides
# ------------------------------------------------------------
set -euo pipefail
umask 077

# Configuration par d√©faut
DEFAULT_SECURITY_LEVEL="cnsa20"  # cnsa20, high, medium, legacy
DEFAULT_HYBRID_MODE="hybrid"     # hybrid, pq-only, ecc-only

# Fonction d'aide
show_help() {
    cat << EOF
Usage: $0 [OPTIONS] <executable_path>

G√©n√®re une PKI hybride post-quantique compatible avec wolfSSL 5.8.2

OPTIONS:
    -s, --security-level LEVEL    Niveau de s√©curit√© (cnsa20, high, medium, legacy)
                                  cnsa20: P-521+ML-DSA-87 (d√©faut)
                                  high:   P-384+ML-DSA-65
                                  medium: P-256+ML-DSA-44
                                  legacy: ECC seul (r√©trocompatibilit√©)
    
    -m, --mode MODE               Mode hybride (hybrid, pq-only, ecc-only)
                                  hybrid: ECC + Post-quantique (d√©faut)
                                  pq-only: Post-quantique seul
                                  ecc-only: ECC traditionnel seul
    
    -h, --help                    Affiche cette aide

EXEMPLES:
    $0 ./build/bin/server                           # CNSA 2.0 hybride
    $0 -s medium -m hybrid ./build/bin/client       # P-256+ML-DSA-44 hybride
    $0 -s high -m pq-only ./build/bin/server        # ML-DSA-65 seul
    $0 -s legacy ./build/bin/legacy_client          # ECC seul

NIVEAUX DE S√âCURIT√â:
    cnsa20  : 256-bit quantum security (P-521 + ML-DSA-87)  [CNSA 2.0]
    high    : 192-bit quantum security (P-384 + ML-DSA-65)
    medium  : 128-bit quantum security (P-256 + ML-DSA-44)
    legacy  : ECC traditionnel seul (pour compatibilit√©)

EOF
}

# Parse des arguments
SECURITY_LEVEL="$DEFAULT_SECURITY_LEVEL"
HYBRID_MODE="$DEFAULT_HYBRID_MODE"

while [[ $# -gt 0 ]]; do
    case $1 in
        -s|--security-level)
            SECURITY_LEVEL="$2"
            shift 2
            ;;
        -m|--mode)
            HYBRID_MODE="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -*)
            echo "Option inconnue: $1" >&2
            show_help >&2
            exit 1
            ;;
        *)
            EXECUTABLE_PATH="$1"
            shift
            ;;
    esac
done

# V√©rification des arguments
if [ -z "${EXECUTABLE_PATH:-}" ]; then
    echo "Erreur: Chemin de l'ex√©cutable requis" >&2
    show_help >&2
    exit 1
fi

if [[ ! "$SECURITY_LEVEL" =~ ^(cnsa20|high|medium|legacy)$ ]]; then
    echo "Erreur: Niveau de s√©curit√© invalide: $SECURITY_LEVEL" >&2
    exit 1
fi

if [[ ! "$HYBRID_MODE" =~ ^(hybrid|pq-only|ecc-only)$ ]]; then
    echo "Erreur: Mode hybride invalide: $HYBRID_MODE" >&2
    exit 1
fi

# Configuration des param√®tres selon le niveau de s√©curit√©
case "$SECURITY_LEVEL" in
    cnsa20)
        ROOT_ECC_CURVE="secp521r1"
        ROOT_MLDSA_LEVEL="87"
        SUB_ECC_CURVE="secp384r1"
        SUB_MLDSA_LEVEL="65"
        LEAF_ECC_CURVE="secp521r1"
        LEAF_MLDSA_LEVEL="87"
        SECURITY_BITS="256"
        ;;
    high)
        ROOT_ECC_CURVE="secp384r1"
        ROOT_MLDSA_LEVEL="65"
        SUB_ECC_CURVE="secp384r1"
        SUB_MLDSA_LEVEL="65"
        LEAF_ECC_CURVE="secp384r1"
        LEAF_MLDSA_LEVEL="65"
        SECURITY_BITS="192"
        ;;
    medium)
        ROOT_ECC_CURVE="prime256v1"
        ROOT_MLDSA_LEVEL="44"
        SUB_ECC_CURVE="prime256v1"
        SUB_MLDSA_LEVEL="44"
        LEAF_ECC_CURVE="prime256v1"
        LEAF_MLDSA_LEVEL="44"
        SECURITY_BITS="128"
        ;;
    legacy)
        ROOT_ECC_CURVE="secp384r1"
        SUB_ECC_CURVE="prime256v1"
        LEAF_ECC_CURVE="prime256v1"
        SECURITY_BITS="128"
        HYBRID_MODE="ecc-only"
        ;;
esac

# Configuration des r√©pertoires
EXECUTABLE_DIR=$(dirname "$EXECUTABLE_PATH")
EXECUTABLE_NAME=$(basename "$EXECUTABLE_PATH")

if [[ "$EXECUTABLE_DIR" == */bin ]]; then
    BUILD_ROOT_DIR=$(dirname "$EXECUTABLE_DIR")
else
    BUILD_ROOT_DIR="$EXECUTABLE_DIR"
fi

PKI_DIR="$BUILD_ROOT_DIR/pki_hybrid"

echo "=========================================="
echo "G√©n√©rateur PKI Hybride Post-Quantique"
echo "=========================================="
echo "Ex√©cutable    : $EXECUTABLE_NAME"
echo "R√©pertoire    : $BUILD_ROOT_DIR"
echo "S√©curit√©      : $SECURITY_LEVEL ($SECURITY_BITS-bit quantum security)"
echo "Mode          : $HYBRID_MODE"
echo "PKI hybride   : $PKI_DIR"
echo

# V√©rification des pr√©requis
command -v openssl >/dev/null 2>&1 || { 
    echo "Erreur: OpenSSL requis mais non trouv√©" >&2
    exit 1 
}

# V√©rification de la version OpenSSL pour le support post-quantique
OPENSSL_VERSION=$(openssl version | cut -d' ' -f2)
echo "Version OpenSSL: $OPENSSL_VERSION"

# Note: Pour une impl√©mentation compl√®te, nous aurions besoin d'OpenSSL avec support PQC
# ou d'utiliser directement les outils wolfSSL. Pour cette d√©monstration, nous simulons
# la g√©n√©ration de certificats hybrides avec les extensions appropri√©es.

# V√©rification de l'existence et validit√© de la PKI
if [ -d "$PKI_DIR" ] && [ -f "$PKI_DIR/server/server_hybrid.pem" ] && [ -f "$PKI_DIR/client/client_hybrid.pem" ]; then
    echo "‚úì PKI hybride existante trouv√©e"
    
    # V√©rification de la validit√© des certificats
    if openssl x509 -in "$PKI_DIR/server/server_hybrid.pem" -noout -checkend 2592000 >/dev/null 2>&1; then
        echo "‚úì Certificats encore valides (>30 jours)"
        echo "‚úì R√©utilisation de la PKI hybride existante pour $EXECUTABLE_NAME"
        exit 0
    else
        echo "! Certificats expir√©s ou expirant bient√¥t"
        echo "! R√©g√©n√©ration de la PKI hybride"
    fi
fi

# Calcul des dur√©es de validit√© (Y2038 safeguard)
LIMIT_TS=$(date -ud '2037-12-31 23:59:59Z' +%s)
NOW_TS=$(date -u +%s)
DAYS_LEFT=$(( (LIMIT_TS - NOW_TS) / 86400 ))

ROOT_DAYS=$(( DAYS_LEFT - 30 ))
(( ROOT_DAYS < 730 )) && ROOT_DAYS=730   # minimum 2 ans

SUBCA_DAYS=$(( ROOT_DAYS / 2 ))
LEAF_DAYS=825  # 27 mois (compatible navigateurs)

echo "Dur√©es de validit√©:"
echo "  Root CA      : $ROOT_DAYS jours"
echo "  Sub-CA       : $SUBCA_DAYS jours"
echo "  Certificats  : $LEAF_DAYS jours"
echo

# Nettoyage et cr√©ation des r√©pertoires
rm -rf "$PKI_DIR"
mkdir -p "$PKI_DIR"/{root,sub,server,client,tools}

# ============================================================================
# Fonctions utilitaires pour les certificats hybrides
# ============================================================================

# G√©n√®re une configuration OpenSSL pour certificats hybrides
generate_hybrid_cert_config() {
    local cert_type="$1"
    local subject="$2"
    local extensions="$3"
    local config_file="$4"
    
    cat > "$config_file" << EOF
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
$subject

[v3_req]
$extensions

# Extensions hybrides X.509 2019 (simul√©es)
# Dans une impl√©mentation r√©elle, ces extensions contiendraient
# les cl√©s publiques et signatures post-quantiques
1.2.840.113549.1.1.1 = ASN1:NULL
# Extension Alternative Public Key (simul√©e)
# 1.3.6.1.4.1.2.267.12.4.1 = ASN1:OCTET STRING
# Extension Alternative Signature Algorithm (simul√©e)  
# 1.3.6.1.4.1.2.267.12.4.2 = ASN1:OCTET STRING
# Extension Alternative Signature Value (simul√©e)
# 1.3.6.1.4.1.2.267.12.4.3 = ASN1:OCTET STRING
EOF
}

# Simule la g√©n√©ration d'une cl√© post-quantique
generate_pq_key_simulation() {
    local key_type="$1"  # mlkem ou mldsa
    local level="$2"     # 44, 65, 87 pour mldsa ou 512, 768, 1024 pour mlkem
    local output_file="$3"
    
    echo "# Simulation cl√© post-quantique $key_type-$level" > "$output_file"
    echo "# Dans une impl√©mentation r√©elle, ceci serait g√©n√©r√© par wolfSSL" >> "$output_file"
    echo "# avec wc_MlDsaKey_MakeKey() ou wc_MlKemKey_MakeKey()" >> "$output_file"
    
    # G√©n√®re des donn√©es pseudo-al√©atoires pour simulation
    openssl rand -hex 64 | fold -w 64 | sed 's/^/# /' >> "$output_file"
}

# ============================================================================
# 1. G√©n√©ration du Root CA hybride
# ============================================================================

echo "üîë G√©n√©ration du Root CA hybride ($ROOT_ECC_CURVE + ML-DSA-$ROOT_MLDSA_LEVEL)..."

# G√©n√®re la cl√© ECC pour le Root CA
openssl ecparam -name "$ROOT_ECC_CURVE" -genkey -noout -out "$PKI_DIR/root/ca_ecc.key"

# Simule la g√©n√©ration de la cl√© ML-DSA pour le Root CA
if [[ "$HYBRID_MODE" != "ecc-only" ]]; then
    generate_pq_key_simulation "mldsa" "$ROOT_MLDSA_LEVEL" "$PKI_DIR/root/ca_mldsa.key"
fi

# Configuration pour le Root CA hybride
SUBJECT_ROOT="C=FR/O=Demo Hybrid Org/CN=Demo Root CA Hybrid $SECURITY_LEVEL"
EXTENSIONS_ROOT="basicConstraints=critical,CA:true
keyUsage=critical,keyCertSign,cRLSign
subjectKeyIdentifier=hash"

if [[ "$HYBRID_MODE" != "ecc-only" ]]; then
    SUBJECT_ROOT="$SUBJECT_ROOT (ECC+ML-DSA-$ROOT_MLDSA_LEVEL)"
fi

generate_hybrid_cert_config "root" "$SUBJECT_ROOT" "$EXTENSIONS_ROOT" "$PKI_DIR/root/ca.conf"

# G√©n√®re le certificat Root CA auto-sign√©
openssl req -new -x509 -days "$ROOT_DAYS" \
    -config "$PKI_DIR/root/ca.conf" \
    -key "$PKI_DIR/root/ca_ecc.key" \
    -out "$PKI_DIR/root/ca.pem"

echo "‚úì Root CA hybride g√©n√©r√©"

# ============================================================================
# 2. G√©n√©ration du Sub-CA hybride
# ============================================================================

echo "üîë G√©n√©ration du Sub-CA hybride ($SUB_ECC_CURVE + ML-DSA-$SUB_MLDSA_LEVEL)..."

# G√©n√®re la cl√© ECC pour le Sub-CA
openssl ecparam -name "$SUB_ECC_CURVE" -genkey -noout -out "$PKI_DIR/sub/sub_ecc.key"

# Simule la g√©n√©ration de la cl√© ML-DSA pour le Sub-CA
if [[ "$HYBRID_MODE" != "ecc-only" ]]; then
    generate_pq_key_simulation "mldsa" "$SUB_MLDSA_LEVEL" "$PKI_DIR/sub/sub_mldsa.key"
fi

# Configuration pour le Sub-CA hybride
SUBJECT_SUB="C=FR/O=Demo Hybrid Org/CN=Demo Sub-CA Hybrid $SECURITY_LEVEL"
EXTENSIONS_SUB="basicConstraints=critical,CA:true,pathlen:0
keyUsage=critical,keyCertSign,cRLSign
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer"

if [[ "$HYBRID_MODE" != "ecc-only" ]]; then
    SUBJECT_SUB="$SUBJECT_SUB (ECC+ML-DSA-$SUB_MLDSA_LEVEL)"
fi

generate_hybrid_cert_config "subca" "$SUBJECT_SUB" "$EXTENSIONS_SUB" "$PKI_DIR/sub/sub.conf"

# G√©n√®re la CSR pour le Sub-CA
openssl req -new -config "$PKI_DIR/sub/sub.conf" \
    -key "$PKI_DIR/sub/sub_ecc.key" \
    -out "$PKI_DIR/sub/sub.csr"

# Signe le Sub-CA avec le Root CA
openssl x509 -req -days "$SUBCA_DAYS" \
    -in "$PKI_DIR/sub/sub.csr" \
    -CA "$PKI_DIR/root/ca.pem" \
    -CAkey "$PKI_DIR/root/ca_ecc.key" \
    -set_serial 1000 \
    -extensions v3_req \
    -extfile "$PKI_DIR/sub/sub.conf" \
    -out "$PKI_DIR/sub/sub.pem"

echo "‚úì Sub-CA hybride g√©n√©r√©"

# ============================================================================
# 3. G√©n√©ration du certificat serveur hybride
# ============================================================================

echo "üîë G√©n√©ration du certificat serveur hybride ($LEAF_ECC_CURVE + ML-DSA-$LEAF_MLDSA_LEVEL)..."

# G√©n√®re la cl√© ECC pour le serveur
openssl ecparam -name "$LEAF_ECC_CURVE" -genkey -noout -out "$PKI_DIR/server/server_ecc.key"

# Simule la g√©n√©ration de la cl√© ML-DSA pour le serveur
if [[ "$HYBRID_MODE" != "ecc-only" ]]; then
    generate_pq_key_simulation "mldsa" "$LEAF_MLDSA_LEVEL" "$PKI_DIR/server/server_mldsa.key"
fi

# Configuration pour le certificat serveur hybride
SUBJECT_SERVER="C=FR/O=Demo Hybrid Org/CN=server.hybrid.local"
EXTENSIONS_SERVER="extendedKeyUsage=serverAuth
subjectAltName=DNS:server.hybrid.local,DNS:localhost,IP:127.0.0.1
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer"

if [[ "$HYBRID_MODE" != "ecc-only" ]]; then
    SUBJECT_SERVER="$SUBJECT_SERVER (ECC+ML-DSA-$LEAF_MLDSA_LEVEL)"
fi

generate_hybrid_cert_config "server" "$SUBJECT_SERVER" "$EXTENSIONS_SERVER" "$PKI_DIR/server/server.conf"

# G√©n√®re la CSR pour le serveur
openssl req -new -config "$PKI_DIR/server/server.conf" \
    -key "$PKI_DIR/server/server_ecc.key" \
    -out "$PKI_DIR/server/server.csr"

# Signe le certificat serveur avec le Sub-CA
openssl x509 -req -days "$LEAF_DAYS" \
    -in "$PKI_DIR/server/server.csr" \
    -CA "$PKI_DIR/sub/sub.pem" \
    -CAkey "$PKI_DIR/sub/sub_ecc.key" \
    -set_serial 2000 \
    -extensions v3_req \
    -extfile "$PKI_DIR/server/server.conf" \
    -out "$PKI_DIR/server/server_hybrid.pem"

# Cr√©e la cha√Æne compl√®te pour le serveur
cat "$PKI_DIR/server/server_hybrid.pem" "$PKI_DIR/sub/sub.pem" \
    > "$PKI_DIR/server/fullchain_hybrid.pem"

echo "‚úì Certificat serveur hybride g√©n√©r√©"

# ============================================================================
# 4. G√©n√©ration du certificat client hybride
# ============================================================================

echo "üîë G√©n√©ration du certificat client hybride ($LEAF_ECC_CURVE + ML-DSA-$LEAF_MLDSA_LEVEL)..."

# G√©n√®re la cl√© ECC pour le client
openssl ecparam -name "$LEAF_ECC_CURVE" -genkey -noout -out "$PKI_DIR/client/client_ecc.key"

# Simule la g√©n√©ration de la cl√© ML-DSA pour le client
if [[ "$HYBRID_MODE" != "ecc-only" ]]; then
    generate_pq_key_simulation "mldsa" "$LEAF_MLDSA_LEVEL" "$PKI_DIR/client/client_mldsa.key"
fi

# Configuration pour le certificat client hybride
SUBJECT_CLIENT="C=FR/O=Demo Hybrid Org/CN=client.hybrid.local"
EXTENSIONS_CLIENT="extendedKeyUsage=clientAuth
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer"

if [[ "$HYBRID_MODE" != "ecc-only" ]]; then
    SUBJECT_CLIENT="$SUBJECT_CLIENT (ECC+ML-DSA-$LEAF_MLDSA_LEVEL)"
fi

generate_hybrid_cert_config "client" "$SUBJECT_CLIENT" "$EXTENSIONS_CLIENT" "$PKI_DIR/client/client.conf"

# G√©n√®re la CSR pour le client
openssl req -new -config "$PKI_DIR/client/client.conf" \
    -key "$PKI_DIR/client/client_ecc.key" \
    -out "$PKI_DIR/client/client.csr"

# Signe le certificat client avec le Sub-CA
openssl x509 -req -days "$LEAF_DAYS" \
    -in "$PKI_DIR/client/client.csr" \
    -CA "$PKI_DIR/sub/sub.pem" \
    -CAkey "$PKI_DIR/sub/sub_ecc.key" \
    -set_serial 3000 \
    -extensions v3_req \
    -extfile "$PKI_DIR/client/client.conf" \
    -out "$PKI_DIR/client/client_hybrid.pem"

# Cr√©e la cha√Æne compl√®te pour le client
cat "$PKI_DIR/client/client_hybrid.pem" "$PKI_DIR/sub/sub.pem" \
    > "$PKI_DIR/client/fullchain_hybrid.pem"

echo "‚úì Certificat client hybride g√©n√©r√©"

# ============================================================================
# 5. G√©n√©ration des fichiers de configuration wolfSSL
# ============================================================================

echo "üìù G√©n√©ration des fichiers de configuration wolfSSL..."

# Configuration TLS pour wolfSSL avec support hybride
cat > "$PKI_DIR/tools/wolfssl_hybrid.conf" << EOF
# Configuration wolfSSL pour certificats hybrides post-quantiques
# Compatible avec wolfSSL 5.8.2 et FIPS 203/204

# Niveau de s√©curit√©: $SECURITY_LEVEL ($SECURITY_BITS-bit quantum security)
# Mode hybride: $HYBRID_MODE

# Groupes d'√©change de cl√©s support√©s
EOF

case "$SECURITY_LEVEL" in
    cnsa20)
        echo "# supported_groups = P521_MLKEM1024:P521:MLKEM1024" >> "$PKI_DIR/tools/wolfssl_hybrid.conf"
        echo "# signature_algorithms = ECDSA_P521_MLDSA87:ECDSA+SHA512:MLDSA87" >> "$PKI_DIR/tools/wolfssl_hybrid.conf"
        ;;
    high)
        echo "# supported_groups = P384_MLKEM768:P384:MLKEM768" >> "$PKI_DIR/tools/wolfssl_hybrid.conf"
        echo "# signature_algorithms = ECDSA_P384_MLDSA65:ECDSA+SHA384:MLDSA65" >> "$PKI_DIR/tools/wolfssl_hybrid.conf"
        ;;
    medium)
        echo "# supported_groups = P256_MLKEM512:P256:MLKEM512" >> "$PKI_DIR/tools/wolfssl_hybrid.conf"
        echo "# signature_algorithms = ECDSA_P256_MLDSA44:ECDSA+SHA256:MLDSA44" >> "$PKI_DIR/tools/wolfssl_hybrid.conf"
        ;;
    legacy)
        echo "# supported_groups = P521:P384:P256" >> "$PKI_DIR/tools/wolfssl_hybrid.conf"
        echo "# signature_algorithms = ECDSA+SHA512:ECDSA+SHA384:ECDSA+SHA256" >> "$PKI_DIR/tools/wolfssl_hybrid.conf"
        ;;
esac

cat >> "$PKI_DIR/tools/wolfssl_hybrid.conf" << EOF

# Cipher suites TLS 1.3 recommand√©es
# cipher_suites = TLS13-AES256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES128-GCM-SHA256

# Extensions X.509 post-quantiques activ√©es
# enable_pq_x509_extensions = true

# Chemins des certificats et cl√©s
certificate_file = $PKI_DIR/server/server_hybrid.pem
private_key_file = $PKI_DIR/server/server_ecc.key
ca_file = $PKI_DIR/root/ca.pem
chain_file = $PKI_DIR/server/fullchain_hybrid.pem

# Configuration client
client_certificate_file = $PKI_DIR/client/client_hybrid.pem
client_private_key_file = $PKI_DIR/client/client_ecc.key
client_chain_file = $PKI_DIR/client/fullchain_hybrid.pem
EOF

# Script de test de connectivit√© hybride
cat > "$PKI_DIR/tools/test_hybrid_connection.sh" << 'EOF'
#!/bin/bash
# Script de test pour v√©rifier la connectivit√© hybride post-quantique

PKI_DIR=$(dirname "$(dirname "$(realpath "$0")")")

echo "Test de connectivit√© hybride post-quantique"
echo "==========================================="

# V√©rification des certificats
echo "1. V√©rification des certificats hybrides..."

if openssl verify -CAfile "$PKI_DIR/root/ca.pem" \
   -untrusted "$PKI_DIR/sub/sub.pem" \
   "$PKI_DIR/server/server_hybrid.pem"; then
    echo "‚úì Certificat serveur valide"
else
    echo "‚úó Certificat serveur invalide"
    exit 1
fi

if openssl verify -CAfile "$PKI_DIR/root/ca.pem" \
   -untrusted "$PKI_DIR/sub/sub.pem" \
   "$PKI_DIR/client/client_hybrid.pem"; then
    echo "‚úì Certificat client valide"
else
    echo "‚úó Certificat client invalide"
    exit 1
fi

# Affichage des informations de certificat
echo
echo "2. Informations des certificats hybrides..."
echo "Root CA:"
openssl x509 -in "$PKI_DIR/root/ca.pem" -noout -subject -issuer -dates

echo
echo "Certificat serveur:"
openssl x509 -in "$PKI_DIR/server/server_hybrid.pem" -noout -subject -issuer -dates

echo
echo "Certificat client:"
openssl x509 -in "$PKI_DIR/client/client_hybrid.pem" -noout -subject -issuer -dates

echo
echo "‚úÖ Tous les tests de certificats hybrides r√©ussis!"
echo
echo "Pour utiliser avec wolfSSL:"
echo "  Server cert: $PKI_DIR/server/fullchain_hybrid.pem"
echo "  Server key:  $PKI_DIR/server/server_ecc.key"
echo "  Client cert: $PKI_DIR/client/fullchain_hybrid.pem"
echo "  Client key:  $PKI_DIR/client/client_ecc.key"
echo "  CA cert:     $PKI_DIR/root/ca.pem"
EOF

chmod +x "$PKI_DIR/tools/test_hybrid_connection.sh"

# Nettoyage des fichiers temporaires
rm -f "$PKI_DIR"/{root,sub,server,client}/*.{csr,conf}

# ============================================================================
# R√©sum√© et v√©rification finale
# ============================================================================

echo
echo "üéâ PKI hybride post-quantique g√©n√©r√©e avec succ√®s!"
echo "=================================================="
echo
echo "Configuration:"
echo "  Niveau de s√©curit√© : $SECURITY_LEVEL ($SECURITY_BITS-bit quantum security)"
echo "  Mode hybride       : $HYBRID_MODE"
echo "  Compatible CNSA 2.0: $([ "$SECURITY_LEVEL" = "cnsa20" ] && echo "Oui" || echo "Non")"
echo
echo "Certificats g√©n√©r√©s:"

for cert_file in root/ca.pem server/server_hybrid.pem client/client_hybrid.pem; do
    if [ -f "$PKI_DIR/$cert_file" ]; then
        echo "  ‚úì $cert_file"
        openssl x509 -in "$PKI_DIR/$cert_file" -noout -subject -enddate | sed 's/^/    /'
    fi
done

echo
echo "Fichiers de configuration:"
echo "  ‚úì $PKI_DIR/tools/wolfssl_hybrid.conf"
echo "  ‚úì $PKI_DIR/tools/test_hybrid_connection.sh"
echo
echo "Expiration avant 2038: ‚úì Oui (Y2038 safe)"
echo "PKI partag√©e cr√©√©e dans: $PKI_DIR"
echo
echo "Pour tester la PKI hybride:"
echo "  cd $PKI_DIR && ./tools/test_hybrid_connection.sh"
echo
echo "üîê Votre infrastructure est maintenant prot√©g√©e contre les ordinateurs quantiques!"

exit 0 